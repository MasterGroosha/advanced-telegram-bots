"""Added expiration_date column to licenses table

Revision ID: 79ba75fa301b
Revises: ab57f3c60220
Create Date: 2024-09-02 02:21:57.755968

"""
from datetime import datetime, timedelta, UTC
from random import randint
from typing import Sequence, Union

from alembic import op
from sqlalchemy import BigInteger, String, DateTime, Column, select
from sqlalchemy.orm import Mapped, mapped_column, DeclarativeBase
from sqlalchemy.orm.session import Session

# revision identifiers, used by Alembic.
revision: str = '79ba75fa301b'
down_revision: Union[str, None] = 'ab57f3c60220'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


class Base(DeclarativeBase):
    pass


class License(Base):
    __tablename__ = "licenses"

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    email: Mapped[str] = mapped_column(String, nullable=False)
    key: Mapped[str] = mapped_column(String, nullable=False)
    expiration_date: Mapped[datetime] = mapped_column(
        DateTime, nullable=True
    )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'licenses',
        Column('expiration_date', DateTime(), nullable=True)
    )

    # Создадим сессию и получим все объекты вышеописанной
    # модели License из базы.
    session = Session(bind=op.get_bind())
    statement = select(License)
    rows = session.scalars(statement).all()

    # Если у вас версия Python ниже 3.12, то вместо datetime.now(UTC)
    # можно использовать datetime.utcnow()
    now = datetime.now(UTC).replace(hour=0, minute=0, second=0, microsecond=0)

    # Теперь для каждой записи зададим произвольное значение
    # expiration_date от 10 до 40 дней в будущем.
    row: License
    for row in rows:
        days_in_future = timedelta(days=randint(10,40))
        row.expiration_date = now + days_in_future
    session.commit()

    # Снова включаем запрет на NULL для столбца expiration_date
    op.alter_column('licenses', 'expiration_date', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('licenses', 'expiration_date')
    # ### end Alembic commands ###
